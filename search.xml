<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ThreadLocal</title>
      <link href="/2022/12/24/ThreadLocal/"/>
      <url>/2022/12/24/ThreadLocal/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/image-20221224231606153.png" alt="image-20221224231606153"></p><ul><li>ThreadLocal的作用以及应用场景</li><li>使用场景</li><li>原理分析</li><li>ThreadLocalMap的底层结构</li><li>内存泄露产生的原因</li><li>解决Hash冲突</li><li>使用ThreadLocal时对象存在哪里？</li></ul><hr><h2 id="ThreadLocal的作用以及应用场景"><a href="#ThreadLocal的作用以及应用场景" class="headerlink" title="ThreadLocal的作用以及应用场景"></a><strong>ThreadLocal的作用以及应用场景</strong></h2><p><code>ThreadLocal</code>算是一种并发容器吧，因为他的内部是有<code>ThreadLocalMap</code>组成，<code>ThreadLocal</code>是为了解决多线程情况下变量不能被共享的问题，也就是多线程共享变量的问题。</p><p><code>ThreadLocal</code>和<code>Lock</code>以及<code>Synchronized</code>的区别是：<code>ThreadLocal</code>是给每个线程分配一个变量（对象），各个线程都存有变量的副本，这样每个线程都是使用自己（变量）对象实例，使线程与线程之间进行隔离；而<code>Lock</code>和<code>Synchronized</code>的方式是使线程有顺序的执行。</p><p>举一个简单的例子：目前有100个学生等待签字，但是老师只有一个笔，那老师只能按顺序的分给每个学生，等待A学生签字完成然后将笔交给B学生，这就类似<code>Lock</code>，<code>Synchronized</code>的方式。而<code>ThreadLocal</code>是，老师直接拿出一百个笔给每个学生；再效率提高的同事也要付出一个内存消耗；也就是以空间换时间的概念</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a><strong>使用场景</strong></h2><p>Spring的事务隔离就是使用<code>ThreadLocal</code>和AOP来解决的；主要是<code>TransactionSynchronizationManager</code>这个类；</p><p>解决<code>SimpleDateFormat</code>线程不安全问题；</p><p>当我们使用<code>SimpleDateFormat</code>的<code>parse()</code>方法的时候，<code>parse()</code>方法会先调用<code>Calendar.clear()</code>方法，然后调用<code>Calendar.add()</code>方法，如果一个线程先调用了<code>add()</code>方法，然后另一个线程调用了<code>clear()</code>方法；这时候<code>parse()</code>方法就会出现解析错误；如果不信我们可以来个例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public class SimpleDateFormatTest &#123;</span><br><span class="line"></span><br><span class="line">    private static SimpleDateFormat simpleDateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        for (int i = 0; i &lt; 50; i++) &#123;</span><br><span class="line">            Thread thread = new Thread(new Runnable() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void run() &#123;</span><br><span class="line">                    dateFormat();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            thread.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 字符串转成日期类型</span><br><span class="line">     */</span><br><span class="line">    public static void dateFormat() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            simpleDateFormat.parse(&quot;2021-5-27&quot;);</span><br><span class="line">        &#125; catch (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们只启动了50个线程问题就会出现，其实看巧不巧，有时候只有10个线程的情况就会出错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;Thread-40&quot; java.lang.NumberFormatException: For input string: &quot;&quot;</span><br><span class="line"> at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)</span><br><span class="line"> at java.lang.Long.parseLong(Long.java:601)</span><br><span class="line"> at java.lang.Long.parseLong(Long.java:631)</span><br><span class="line"> at java.text.DigitList.getLong(DigitList.java:195)</span><br><span class="line"> at java.text.DecimalFormat.parse(DecimalFormat.java:2084)</span><br><span class="line"> at java.text.SimpleDateFormat.subParse(SimpleDateFormat.java:1869)</span><br><span class="line"> at java.text.SimpleDateFormat.parse(SimpleDateFormat.java:1514)</span><br><span class="line"> at java.text.DateFormat.parse(DateFormat.java:364)</span><br><span class="line"> at cn.haoxy.use.lock.sdf.SimpleDateFormatTest.dateFormat(SimpleDateFormatTest.java:36)</span><br><span class="line"> at cn.haoxy.use.lock.sdf.SimpleDateFormatTest$1.run(SimpleDateFormatTest.java:23)</span><br><span class="line"> at java.lang.Thread.run(Thread.java:748)</span><br><span class="line">Exception in thread &quot;Thread-43&quot; java.lang.NumberFormatException: multiple points</span><br><span class="line"> at sun.misc.FloatingDecimal.readJavaFormatString(FloatingDecimal.java:1890)</span><br><span class="line"> at sun.misc.FloatingDecimal.parseDouble(FloatingDecimal.java:110)</span><br><span class="line"> at java.lang.Double.parseDouble(Double.java:538)</span><br><span class="line"> at java.text.DigitList.getDouble(DigitList.java:169)</span><br><span class="line"> at java.text.DecimalFormat.parse(DecimalFormat.java:2089)</span><br><span class="line"> at java.text.SimpleDateFormat.subParse(SimpleDateFormat.java:1869)</span><br><span class="line"> at java.text.SimpleDateFormat.parse(SimpleDateFormat.java:1514)</span><br><span class="line"> at java.text.DateFormat.parse(DateFormat.java:364)</span><br><span class="line"> at  .............</span><br></pre></td></tr></table></figure><p>其实解决这个问题很简单，让每个线程new一个自己的<code>SimpleDateFormat</code>，但是如果100个线程都要new100个<code>SimpleDateFormat</code>吗？</p><p>当然我们不能这么做，我们可以借助线程池加上<code>ThreadLocal</code>来解决这个问题：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public class SimpleDateFormatTest &#123;</span><br><span class="line"></span><br><span class="line">    private static ThreadLocal&lt;SimpleDateFormat&gt; local = new ThreadLocal&lt;SimpleDateFormat&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">       //初始化线程本地变量</span><br><span class="line">        protected SimpleDateFormat initialValue() &#123;</span><br><span class="line">            return new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ExecutorService es = Executors.newCachedThreadPool();</span><br><span class="line">        for (int i = 0; i &lt; 500; i++) &#123;</span><br><span class="line">            es.execute(() -&gt; &#123;</span><br><span class="line">               //调用字符串转成日期方法</span><br><span class="line">                dateFormat();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        es.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * 字符串转成日期类型</span><br><span class="line">     */</span><br><span class="line">    public static void dateFormat() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">           //ThreadLocal中的get()方法</span><br><span class="line">            local.get().parse(&quot;2021-5-27&quot;);</span><br><span class="line">        &#125; catch (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就优雅的解决了线程安全问题；</p><p>解决过度传参问题；例如一个方法中要调用好多个方法，每个方法都需要传递参数；例如下面示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">void work(User user) &#123;</span><br><span class="line">    getInfo(user);</span><br><span class="line">    checkInfo(user);</span><br><span class="line">    setSomeThing(user);</span><br><span class="line">    log(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用了<code>ThreadLocal</code>之后：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public class ThreadLocalStu &#123;</span><br><span class="line"></span><br><span class="line">    private static ThreadLocal&lt;User&gt; userThreadLocal = new ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    void work(User user) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            userThreadLocal.set(user);</span><br><span class="line">            getInfo();</span><br><span class="line">            checkInfo();</span><br><span class="line">            someThing();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            userThreadLocal.remove();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void setInfo() &#123;</span><br><span class="line">        User u = userThreadLocal.get();</span><br><span class="line">        //.....</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void checkInfo() &#123;</span><br><span class="line">        User u = userThreadLocal.get();</span><br><span class="line">        //....</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void someThing() &#123;</span><br><span class="line">        User u = userThreadLocal.get();</span><br><span class="line">        //....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个线程内需要保存全局变量（比如在登录成功后将用户信息存到<code>ThreadLocal</code>里，然后当前线程操作的业务逻辑直接get取就完事了，有效的避免的参数来回传递的麻烦之处），一定层级上减少代码耦合度。</p><ul><li>比如存储 交易id等信息。每个线程私有。</li><li>比如aop里记录日志需要before记录请求id，end拿出请求id，这也可以。</li><li>比如jdbc连接池（很典型的一个<code>ThreadLocal</code>用法）</li><li>….等等….</li></ul><h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a><strong>原理分析</strong></h2><p>上面我们基本上知道了<code>ThreadLocal</code>的使用方式以及应用场景，当然应用场景不止这些这只是工作中常用到的场景；下面我们对它的原理进行分析;</p><p>我们先看一下它的<code>set()</code>方法;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public void set(T value) &#123;</span><br><span class="line">    Thread t = Thread.currentThread();</span><br><span class="line">    ThreadLocalMap map = getMap(t);</span><br><span class="line">    if (map != null)</span><br><span class="line">        map.set(this, value);</span><br><span class="line">    else</span><br><span class="line">        createMap(t, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>是不是特别简单，首先获取当前线程，用当前线程作为key,去获取<code>ThreadLocalMap</code>,然后判断map是否为空，不为空就将当前线程作为key,传入的value作为map的value值；如果为空就创建一个<code>ThreadLocalMap</code>,然后将key和value方进去；从这里可以看出value值是存放到<code>ThreadLocalMap</code>中；</p><p>然后我们看看<code>ThreadLocalMap</code>是怎么来的？先看下<code>getMap()</code>方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//在Thread类中维护了threadLocals变量，注意是Thread类</span><br><span class="line">ThreadLocal.ThreadLocalMap threadLocals = null; </span><br><span class="line"></span><br><span class="line">//在ThreadLocal类中的getMap()方法</span><br><span class="line">ThreadLocalMap getMap(Thread t) &#123;</span><br><span class="line">        return t.threadLocals;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这就能解释每个线程中都有一个<code>ThreadLocalMap</code>，因为<code>ThreadLocalMap</code>的引用在Thread中维护；这就确保了线程间的隔离；</p><p>我们继续回到<code>set()</code>方法，看到当map等于空的时候<code>createMap(t, value);</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">void createMap(Thread t, T firstValue) &#123;</span><br><span class="line">      t.threadLocals = new ThreadLocalMap(this, firstValue);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这里就是new了一个<code>ThreadLocalMap</code>然后赋值给<code>threadLocals</code>成员变量；<code>ThreadLocalMap</code>构造方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ThreadLocalMap(ThreadLocal&lt;?&gt; firstKey, Object firstValue) &#123;</span><br><span class="line">  //初始化一个Entry   </span><br><span class="line">  table = new Entry[INITIAL_CAPACITY];</span><br><span class="line">   //计算key应该存放的位置</span><br><span class="line">   int i = firstKey.threadLocalHashCode &amp; (INITIAL_CAPACITY - 1);</span><br><span class="line">   //将Entry放到指定位置</span><br><span class="line">   table[i] = new Entry(firstKey, firstValue);</span><br><span class="line">   size = 1;</span><br><span class="line">   //设置数组的大小 16*2/3=10,类似HashMap中的0.75*16=12</span><br><span class="line">   setThreshold(INITIAL_CAPACITY);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>这里写有个大概的印象，后面对<code>ThreadLocalMap</code>内部结构还会进行详细的讲解；</p><p>下面我们再去看一下<code>get()</code>方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public T get() &#123;</span><br><span class="line">    Thread t = Thread.currentThread();</span><br><span class="line">   //用当前线程作为key去获取ThreadLocalMap</span><br><span class="line">    ThreadLocalMap map = getMap(t);</span><br><span class="line">    if (map != null) &#123;</span><br><span class="line">       //map不为空，然后获取map中的Entry</span><br><span class="line">        ThreadLocalMap.Entry e = map.getEntry(this);</span><br><span class="line">        if (e != null) &#123;</span><br><span class="line">            @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">           //如果Entry不为空就获取对应的value值</span><br><span class="line">            T result = (T)e.value;</span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   //如果map为空或者entry为空的话通过该方法初始化，并返回该方法的value</span><br><span class="line">    return setInitialValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>get()</code>方法和<code>set()</code>都比较容易理解，如果map等于空的时候或者entry等于空的时候我们看看<code>setInitialValue()</code>方法做了什么事：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">private T setInitialValue() &#123;</span><br><span class="line">  //初始化变量值 由子类去实现并初始化变量</span><br><span class="line">    T value = initialValue();</span><br><span class="line">    Thread t = Thread.currentThread();</span><br><span class="line">   //这里再次getMap();</span><br><span class="line">    ThreadLocalMap map = getMap(t);</span><br><span class="line">    if (map != null)</span><br><span class="line">        map.set(this, value);</span><br><span class="line">    else</span><br><span class="line">  //和set()方法中的</span><br><span class="line">        createMap(t, value);</span><br><span class="line">    return value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面我们再去看一下<code>ThreadLocal</code>中的<code>initialValue()</code>方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">protected T initialValue() &#123;</span><br><span class="line">     return null;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>设置初始值，由子类去实现；就例如我们上面的例子，重写<code>ThreadLocal</code>类中的<code>initialValue()</code>方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">private static ThreadLocal&lt;SimpleDateFormat&gt; local = new ThreadLocal&lt;SimpleDateFormat&gt;() &#123;</span><br><span class="line">    @Override</span><br><span class="line">   //初始化线程本地变量</span><br><span class="line">    protected SimpleDateFormat initialValue() &#123;</span><br><span class="line">        return new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>createMap()</code>方法和上面<code>set()</code>方法中<code>createMap()</code>方法同一个，就不过多的叙述了；剩下还有一个<code>removve()</code>方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public void remove() &#123;</span><br><span class="line">      ThreadLocalMap m = getMap(Thread.currentThread());</span><br><span class="line">      if (m != null)</span><br><span class="line">        //2. 从map中删除以当前threadLocal实例为key的键值对</span><br><span class="line">          m.remove(this);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>源码的讲解就到这里，也都比较好理解，下面我们看看<code>ThreadLocalMap</code>的底层结构</p><h2 id="ThreadLocalMap的底层结构"><a href="#ThreadLocalMap的底层结构" class="headerlink" title="ThreadLocalMap的底层结构"></a><strong>ThreadLocalMap的底层结构</strong></h2><p>上面我们已经了解了<code>ThreadLocal</code>的使用场景以及它比较重要的几个方法；下面我们再去它的内部结构；经过上的源码分析我们可以看到数据其实都是存放到了<code>ThreadLocal</code>中的内部类<code>ThreadLocalMap</code>中；而<code>ThreadLocalMap</code>中又维护了一个Entry对象，也就说数据最终是存放到Entry对象中的；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">static class ThreadLocalMap &#123;</span><br><span class="line"></span><br><span class="line">        static class Entry extends WeakReference&lt;ThreadLocal&lt;?&gt;&gt; &#123;</span><br><span class="line">            /** The value associated with this ThreadLocal. */</span><br><span class="line">            Object value;</span><br><span class="line"></span><br><span class="line">            Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;</span><br><span class="line">                super(k);</span><br><span class="line">                value = v;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">          ThreadLocalMap(ThreadLocal&lt;?&gt; firstKey, Object firstValue) &#123;</span><br><span class="line">            table = new Entry[INITIAL_CAPACITY];</span><br><span class="line">            int i = firstKey.threadLocalHashCode &amp; (INITIAL_CAPACITY - 1);</span><br><span class="line">            table[i] = new Entry(firstKey, firstValue);</span><br><span class="line">            size = 1;</span><br><span class="line">            setThreshold(INITIAL_CAPACITY);</span><br><span class="line">        &#125;</span><br><span class="line">  // ....................</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Entry的构造方法是以当前线程为key,变量值Object为value进行存储的；在上面的源码中<code>ThreadLocalMap</code>的构造方法中也涉及到了Entry；看到Entry是一个数组；初始化长度为<code>INITIAL_CAPACITY = 16；</code>因为 Entry 继承了 <code>WeakReference</code>，在 Entry 的构造方法中，调用了<code> super(k)</code>方法就会将 <code>threadLocal</code> 实例包装成一个 <code>WeakReferenece</code>。这也是<code>ThreadLocal</code>会产生内存泄露的原因；</p><h2 id="内存泄露产生的原因"><a href="#内存泄露产生的原因" class="headerlink" title="内存泄露产生的原因"></a><strong>内存泄露产生的原因</strong></h2><p><img src="/../images/image-20221224232314960.png" alt="image-20221224232314960"></p><p>如图所示存在一条引用链：<code>Thread Ref-&gt;Thread-&gt;ThreadLocalMap-&gt;Entry-&gt;Key:Value</code>，经过上面的讲解我们知道<code>ThreadLocal</code>作为Key,但是被设置成了弱引用，弱引用在JVM垃圾回收时是优先回收的，就是说无论内存是否足够弱引用对象都会被回收；弱引用的生命周期比较短；当发生一次GC的时候就会变成如下：</p><p><img src="/../images/image-20221224232336814.png" alt="image-20221224232336814"></p><p><code>TreadLocalMap</code>中出现了Key为null的Entry，就没有办法访问这些key为null的Entry的value,如果线程迟迟不结束（也就是说这条引用链无意义的一直存在）就会造成value永远无法回收造成内存泄露；如果当前线程运行结束Thread，<code>ThreadLocalMap</code>,Entry之间没有了引用链，在垃圾回收的时候就会被回收；但是在开发中我们都是使用线程池的方式，线程池的复用不会主动结束；所以还是会存在内存泄露问题；</p><p>解决方法也很简单，就是在使用完之后主动调用<code>remove()</code>方法释放掉；</p><h2 id="解决Hash冲突"><a href="#解决Hash冲突" class="headerlink" title="解决Hash冲突"></a><strong>解决Hash冲突</strong></h2><p>记得在大学学习数据结构的时候学习了很多种解决hash冲突的方法;例如：</p><p><strong>线性探测法（开放地址法的一种）：</strong> 计算出的散列地址如果已被占用，则按顺序找下一个空位。如果找到末尾还没有找到空位置就从头重新开始找；</p><p><img src="/../images/image-20221224232357557.png" alt="image-20221224232357557"></p><p>图片</p><p><strong>二次探测法（开放地址法的一种）</strong></p><p><img src="/../images/image-20221224232414070.png" alt="image-20221224232414070"></p><p>图片</p><p>链地址法：链地址是对每一个同义词都建一个单链表来解决冲突，HashMap采用的是这种方法；</p><p><img src="/../images/image-20221224232429196.png" alt="image-20221224232429196"></p><p><strong>多重Hash法：</strong> 在key冲突的情况下多重hash,直到不冲突为止，这种方式不易产生堆积但是计算量太大；</p><p><strong>公共溢出区法：</strong> 这种方式需要两个表，一个存基础数据，另一个存放冲突数据称为溢出表；</p><p>上面的图片都是在网上找到的一些资料，和大学时学习时的差不多我就直接拿来用了；也当自己复习了一遍；</p><p>介绍了那么多解决Hash冲突的方法，那<code>ThreadLocalMap</code>使用的哪一种方法呢？我们可以看一下源码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">private void set(ThreadLocal&lt;?&gt; key, Object value) &#123;</span><br><span class="line">           Entry[] tab = table;</span><br><span class="line">           int len = tab.length;</span><br><span class="line">      //根据HashCode &amp; 数组长度 计算出数组该存放的位置</span><br><span class="line">           int i = key.threadLocalHashCode &amp; (len-1);</span><br><span class="line">    //遍历Entry数组中的元素</span><br><span class="line">           for (Entry e = tab[i];</span><br><span class="line">                e != null;</span><br><span class="line">                e = tab[i = nextIndex(i, len)]) &#123;</span><br><span class="line">               ThreadLocal&lt;?&gt; k = e.get();</span><br><span class="line">     //如果这个Entry对象的key正好是即将设置的key，那么就刷新Entry中的value；</span><br><span class="line">               if (k == key) &#123;</span><br><span class="line">                   e.value = value;</span><br><span class="line">                   return;</span><br><span class="line">               &#125;</span><br><span class="line">    // entry!=null,key==null时，说明threadLcoal这key已经被GC了，这里就是上面说到</span><br><span class="line">    //会有内存泄露的地方，当然作者也知道这种情况的存在，所以这里做了一个判断进行解决脏的</span><br><span class="line">    //entry（数组中不想存有过时的entry），但是也不能解决泄露问题，因为旧value还存在没有消失</span><br><span class="line">               if (k == null) &#123;</span><br><span class="line">                 //用当前插入的值代替掉这个key为null的“脏”entry</span><br><span class="line">                   replaceStaleEntry(key, value, i);</span><br><span class="line">                   return;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">   //新建entry并插入table中i处</span><br><span class="line">           tab[i] = new Entry(key, value);</span><br><span class="line">           int sz = ++size;</span><br><span class="line">           if (!cleanSomeSlots(i, sz) &amp;&amp; sz &gt;= threshold)</span><br><span class="line">               rehash();</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>从这里我们可以看出使用的是线性探测的方式来解决hash冲突！</p><p>源码中通过<code>nextIndex(i, len)</code>方法解决 hash 冲突的问题，该方法为<code>((i + 1 &lt; len) ? i + 1 : 0);</code>，也就是不断往后线性探测，直到找到一个空的位置，当到哈希表末尾的时候还没有找到空位置再从 0 开始找，成环形！</p><h2 id="使用ThreadLocal时对象存在哪里？"><a href="#使用ThreadLocal时对象存在哪里？" class="headerlink" title="使用ThreadLocal时对象存在哪里？"></a><strong>使用ThreadLocal时对象存在哪里？</strong></h2><p>在java中，栈内存归属于单个线程，每个线程都会有一个栈内存，其存储的变量只能在其所属线程中可见，即栈内存可以理解成线程的私有变量，而堆内存中的变量对所有线程可见，可以被所有线程访问！</p><p>那么<code>ThreadLocal</code>的实例以及它的值是不是存放在栈上呢？其实不是的，因为<code>ThreadLocal</code>的实例实际上也是被其创建的类持有，（更顶端应该是被线程持有），而<code>ThreadLocal</code>的值其实也是被线程实例持有，它们都是位于堆上，只是通过一些技巧将可见性修改成了线程可见。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>45个实用代码优化技巧</title>
      <link href="/2022/12/24/45%E4%B8%AA%E5%AE%9E%E7%94%A8%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7/"/>
      <url>/2022/12/24/45%E4%B8%AA%E5%AE%9E%E7%94%A8%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<p>不知道大家有没有经历过维护一个已经离职的人的代码的痛苦，一个方法写老长，还有很多的 if else ，根本无法阅读，更不知道代码背后的含义，最重要的是没有人可以问，此时只能心里默默地问候这个留坑的兄弟。。</p><p>其实造成这些原因的很大一部分原因是由于代码规范的问题，如果写的规范，注释好，其实很多问题也就解决了。所以本文我就从代码的编写规范，格式的优化，设计原则和一些常见的代码优化的技巧等方面总结了了 45 个小技巧分享给大家，如果不足，欢迎指正。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/iaIdQfEric9TwZnibN07UrZSdx5VroUSGZJJkRmFg2vmwHoLYUDkCyF62QKCU4nVPXtafD0RMfUpYOmtRGhaaB1Nw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">img</p><h2 id="1、规范命名"><a href="#1、规范命名" class="headerlink" title="1、规范命名"></a><strong>1、规范命名</strong></h2><p>命名是写代码中最频繁的操作，比如类、属性、方法、参数等。好的名字应当能遵循以下几点：</p><p><strong>见名知意</strong></p><p>比如需要定义一个变量需要来计数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int i = 0;</span><br></pre></td></tr></table></figure><p>名称 i 没有任何的实际意义，没有体现出数量的意思，所以我们应当指明数量的名称</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int count = 0;</span><br></pre></td></tr></table></figure><p><strong>能够读的出来</strong></p><p>如下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">private String sfzh;</span><br><span class="line">private String dhhm;</span><br></pre></td></tr></table></figure><p>这些变量的名称，根本读不出来，更别说实际意义了。</p><p>所以我们可以使用正确的可以读出来的英文来命名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">private String idCardNo;</span><br><span class="line">private String phone;</span><br></pre></td></tr></table></figure><h2 id="2、规范代码格式"><a href="#2、规范代码格式" class="headerlink" title="2、规范代码格式"></a><strong>2、规范代码格式</strong></h2><p>好的代码格式能够让人感觉看起来代码更加舒适。</p><p>好的代码格式应当遵守以下几点：</p><ul><li>合适的空格</li><li>代码对齐，比如大括号要对齐</li><li>及时换行，一行不要写太多代码</li></ul><p>好在现在开发工具支持一键格式化，可以帮助美化代码格式。</p><h2 id="3、写好代码注释"><a href="#3、写好代码注释" class="headerlink" title="3、写好代码注释"></a><strong>3、写好代码注释</strong></h2><p>在《代码简洁之道》这本书中作者提到了一个观点，注释的恰当用法是用来弥补我们在用代码表达意图时的失败。换句话说，当无法通过读代码来了解代码所表达的意思的时候，就需要用注释来说明。</p><p>作者之所以这么说，是因为作者觉得随着时间的推移，代码可能会变动，如果不及时更新注释，那么注释就容易产生误导，偏离代码的实际意义。而不及时更新注释的原因是，程序员不喜欢写注释。（作者很懂啊）</p><p>但是这不意味着可以不写注释，当通过代码如果无法表达意思的时候，就需要注释，比如如下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">for (Integer id : ids) &#123;</span><br><span class="line">    if (id == 0) &#123;</span><br><span class="line">        continue;</span><br><span class="line">    &#125;</span><br><span class="line">    //做其他事</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么 id == 0 需要跳过，代码是无法看出来了，就需要注释了。</p><p>好的注释应当满足一下几点：</p><ul><li>解释代码的意图，说明为什么这么写，用来做什么</li><li>对参数和返回值注释，入参代表什么，出参代表什么</li><li>有警示作用，比如说入参不能为空，或者代码是不是有坑</li><li>当代码还未完成时可以使用 todo 注释来注释</li></ul><h2 id="4、try-catch-内部代码抽成一个方法"><a href="#4、try-catch-内部代码抽成一个方法" class="headerlink" title="4、try catch 内部代码抽成一个方法"></a><strong>4、try catch 内部代码抽成一个方法</strong></h2><p>try catch 代码有时会干扰我们阅读核心的代码逻辑，这时就可以把 try catch 内部主逻辑抽离成一个单独的方法</p><p>如下图是 Eureka 服务端源码中服务下线的实现中的一段代码</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/iaIdQfEric9TwZnibN07UrZSdx5VroUSGZJvBbQqFyOYEuqr6yXw0QstgHibmib29SIqpSpOhcjSE8cJXS4Vb3Vx2uA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>整个方法非常长，try 中代码是真正的服务下线的代码实现，finally 可以保证读锁最终一定可以释放。</p><p>所以这段代码其实就可以对核心的逻辑进行抽取。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">protected boolean internalCancel(String appName, String id, boolean isReplication) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        read.lock();</span><br><span class="line">        doInternalCancel(appName, id, isReplication);</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        read.unlock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 剩余代码</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private boolean doInternalCancel(String appName, String id, boolean isReplication) &#123;</span><br><span class="line">    //真正处理下线的逻辑</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、方法别太长"><a href="#5、方法别太长" class="headerlink" title="5、方法别太长"></a><strong>5、方法别太长</strong></h2><p>方法别太长就是字面的意思。一旦代码太长，给人的第一眼感觉就很复杂，让人不想读下去；同时方法太长的代码可能读起来容易让人摸不着头脑，不知道哪一些代码是同一个业务的功能。</p><p>我曾经就遇到过一个方法写了 2000+行，各种 if else 判断，我光理清代码思路就用了很久，最终理清之后，就用策略模式给重构了。</p><p>所以一旦方法过长，可以尝试将相同业务功能的代码单独抽取一个方法，最后在主方法中调用即可。</p><h2 id="6、抽取重复代码"><a href="#6、抽取重复代码" class="headerlink" title="6、抽取重复代码"></a><strong>6、抽取重复代码</strong></h2><p>当一份代码重复出现在程序的多处地方，就会造成程序又臭又长，当这份代码的结构要修改时，每一处出现这份代码的地方都得修改，导致程序的扩展性很差。</p><p>所以一般遇到这种情况，可以抽取成一个工具类，还可以抽成一个公共的父类。</p><h2 id="7、多用-return"><a href="#7、多用-return" class="headerlink" title="7、多用 return"></a><strong>7、多用 return</strong></h2><p>在有时我们平时写代码的情况可能会出现 if 条件套 if 的情况，当 if 条件过多的时候可能会出现如下情况：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">if (条件1) &#123;</span><br><span class="line">    if (条件2) &#123;</span><br><span class="line">        if (条件3) &#123;</span><br><span class="line">            if (条件4) &#123;</span><br><span class="line">                if (条件5) &#123;</span><br><span class="line">                    System.out.println(&quot;三友的java日记&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>面对这种情况，可以换种思路，使用 return 来优化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">if (!条件1) &#123;</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br><span class="line">if (!条件2) &#123;</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br><span class="line">if (!条件3) &#123;</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br><span class="line">if (!条件4) &#123;</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br><span class="line">if (!条件5) &#123;</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;三友的java日记&quot;);</span><br></pre></td></tr></table></figure><p>这样优化就感觉看起来更加直观</p><h2 id="8、if-条件表达式不要太复杂"><a href="#8、if-条件表达式不要太复杂" class="headerlink" title="8、if 条件表达式不要太复杂"></a><strong>8、if 条件表达式不要太复杂</strong></h2><p>比如在如下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if (((StringUtils.isBlank(person.getName())</span><br><span class="line">        || &quot;三友的java日记&quot;.equals(person.getName()))</span><br><span class="line">        &amp;&amp; (person.getAge() != null &amp;&amp; person.getAge() &gt; 10))</span><br><span class="line">        &amp;&amp; &quot;汉&quot;.equals(person.getNational())) &#123;</span><br><span class="line">    // 处理逻辑</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段逻辑，这种条件表达式乍一看不知道是什么，仔细一看还是不知道是什么，这时就可以这么优化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">boolean sanyouOrBlank = StringUtils.isBlank(person.getName()) || &quot;三友的java日记&quot;.equals(person.getName());</span><br><span class="line">boolean ageGreaterThanTen = person.getAge() != null &amp;&amp; person.getAge() &gt; 10;</span><br><span class="line">boolean isHanNational = &quot;汉&quot;.equals(person.getNational());</span><br><span class="line"></span><br><span class="line">if (sanyouOrBlank</span><br><span class="line">    &amp;&amp; ageGreaterThanTen</span><br><span class="line">    &amp;&amp; isHanNational) &#123;</span><br><span class="line">    // 处理逻辑</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时就很容易看懂 if 的逻辑了</p><h2 id="9、优雅地参数校验"><a href="#9、优雅地参数校验" class="headerlink" title="9、优雅地参数校验"></a><strong>9、优雅地参数校验</strong></h2><p>当前端传递给后端参数的时候，通常需要对参数进场检验，一般可能会这么写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@PostMapping</span><br><span class="line">public void addPerson(@RequestBody AddPersonRequest addPersonRequest) &#123;</span><br><span class="line">    if (StringUtils.isBlank(addPersonRequest.getName())) &#123;</span><br><span class="line">        throw new BizException(&quot;人员姓名不能为空&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (StringUtils.isBlank(addPersonRequest.getIdCardNo())) &#123;</span><br><span class="line">        throw new BizException(&quot;身份证号不能为空&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 处理新增逻辑</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种写虽然可以，但是当字段的多的时候，光校验就占据了很长的代码，不够优雅。</p><p>针对参数校验这个问题，有第三方库已经封装好了，比如 hibernate-validator 框架，只需要拿来用即可。</p><p>所以就在实体类上加 <code>@NotBlank</code>、<code>@NotNull</code> 注解来进行校验</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Data</span><br><span class="line">@ToString</span><br><span class="line">private class AddPersonRequest &#123;</span><br><span class="line"></span><br><span class="line">    @NotBlank(message = &quot;人员姓名不能为空&quot;)</span><br><span class="line">    private String name;</span><br><span class="line">    @NotBlank(message = &quot;身份证号不能为空&quot;)</span><br><span class="line">    private String idCardNo;</span><br><span class="line"></span><br><span class="line">    //忽略</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时 Controller 接口就需要方法上就需要加上 <code>@Valid</code> 注解</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@PostMapping</span><br><span class="line">public void addPerson(@RequestBody @Valid AddPersonRequest addPersonRequest) &#123;</span><br><span class="line">    // 处理新增逻辑</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10、统一返回值"><a href="#10、统一返回值" class="headerlink" title="10、统一返回值"></a><strong>10、统一返回值</strong></h2><p>后端在设计接口的时候，需要统一返回值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;code&quot;:0,</span><br><span class="line">    &quot;message&quot;:&quot;成功&quot;,</span><br><span class="line">    &quot;data&quot;:&quot;返回数据&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不仅是给前端参数，也包括提供给第三方的接口等，这样接口调用方法可以按照固定的格式解析代码，不用进行判断。如果不一样，相信我，前端半夜都一定会来找你。</p><p>Spring 中很多方法可以做到统一返回值，而不用每个方法都返回，比如基于 AOP，或者可以自定义 HandlerMethodReturnValueHandler 来实现统一返回值。</p><h2 id="11、统一异常处理"><a href="#11、统一异常处理" class="headerlink" title="11、统一异常处理"></a><strong>11、统一异常处理</strong></h2><p>当你没有统一异常处理的时候，那么所有的接口避免不了 try catch 操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(&quot;/&#123;id&#125;&quot;)</span><br><span class="line">public Result&lt;T&gt; selectPerson(@PathVariable(&quot;id&quot;) Long personId) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        PersonVO vo = personService.selectById(personId);</span><br><span class="line">        return Result.success(vo);</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        //打印日志</span><br><span class="line">        return Result.error(&quot;系统异常&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个接口都得这么玩，那不得满屏的 try catch。</p><p>所以可以基于 Spring 提供的统一异常处理机制来完成。</p><h2 id="12、尽量不传递-null-值"><a href="#12、尽量不传递-null-值" class="headerlink" title="12、尽量不传递 null 值"></a><strong>12、尽量不传递 null 值</strong></h2><p>这个很好理解，不传 null 值可以避免方法不支持为 null 入参时产生的空指针问题。</p><p>当然为了更好的表明该方法是不是可以传 null 值，可以通过@NonNull 和@Nullable 注解来标记。@NonNull 就表示不能传 null 值，@Nullable 就是可以传 null 值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//示例1</span><br><span class="line">public void updatePerson(@Nullable Person person) &#123;</span><br><span class="line">    if (person == null) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    personService.updateById(person);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//示例2</span><br><span class="line">public void updatePerson(@NonNull Person person) &#123;</span><br><span class="line">    personService.updateById(person);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="13、尽量不返回-null-值"><a href="#13、尽量不返回-null-值" class="headerlink" title="13、尽量不返回 null 值"></a><strong>13、尽量不返回 null 值</strong></h2><p>尽量不返回 null 值是为了减少调用者对返回值的为 null 判断，如果无法避免返回 null 值，可以通过返回 Optional 来代替 null 值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public Optional&lt;Person&gt; getPersonById(Long personId) &#123;</span><br><span class="line">    return Optional.ofNullable(personService.selectById(personId));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不想这么写，也可以通过@NonNull 和@Nullable 表示方法会不会返回 null 值。</p><h2 id="14、日志打印规范"><a href="#14、日志打印规范" class="headerlink" title="14、日志打印规范"></a><strong>14、日志打印规范</strong></h2><p>好的日志打印能帮助我们快速定位问题</p><p>好的日志应该遵循以下几点：</p><ul><li>可搜索性，要有明确的关键字信息</li><li>异常日志需要打印出堆栈信息</li><li>合适的日志级别，比如异常使用 error，正常使用 info</li><li>日志内容太大不打印，比如有时需要将图片转成 Base64，那么这个 Base64 就可以不用打印</li></ul><h2 id="15、统一类库"><a href="#15、统一类库" class="headerlink" title="15、统一类库"></a><strong>15、统一类库</strong></h2><p>在一个项目中，可能会由于引入的依赖不同导致引入了很多相似功能的类库，比如常见的 json 类库，又或者是一些常用的工具类，当遇到这种情况下，应当规范在项目中到底应该使用什么类库，而不是一会用 Fastjson，一会使用 Gson。</p><h2 id="16、尽量使用工具类"><a href="#16、尽量使用工具类" class="headerlink" title="16、尽量使用工具类"></a><strong>16、尽量使用工具类</strong></h2><p>比如在对集合判空的时候，可以这么写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public void updatePersons(List&lt;Person&gt; persons) &#123;</span><br><span class="line">    if (persons != null &amp;&amp; persons.size() &gt; 0) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是一般不推荐这么写，可以通过一些判断的工具类来写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public void updatePersons(List&lt;Person&gt; persons) &#123;</span><br><span class="line">    if (!CollectionUtils.isEmpty(persons)) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不仅集合，比如字符串的判断等等，就使用工具类，不要手动判断。</p><h2 id="17、尽量不要重复造轮子"><a href="#17、尽量不要重复造轮子" class="headerlink" title="17、尽量不要重复造轮子"></a><strong>17、尽量不要重复造轮子</strong></h2><p>就拿格式化日期来来说，我们一般封装成一个工具类来调用，比如如下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">private static final SimpleDateFormat DATE_TIME_FORMAT = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class="line"></span><br><span class="line">public static String formatDateTime(Date date) &#123;</span><br><span class="line">    return DATE_TIME_FORMAT.format(date);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码看似没啥问题，但是却忽略了 SimpleDateFormat 是个线程不安全的类，所以这就会引起坑。</p><p>一般对于这种已经有开源的项目并且已经做得很好的时候，比如 Hutool，就可以把轮子直接拿过来用了。</p><h2 id="18、类和方法单一职责"><a href="#18、类和方法单一职责" class="headerlink" title="18、类和方法单一职责"></a><strong>18、类和方法单一职责</strong></h2><p>单一职责原则是设计模式的七大设计原则之一，它的核心意思就是字面的意思，一个类或者一个方法只做单一的功能。</p><p>就拿 Nacos 来说，在 Nacos1.x 的版本中，有这么一个接口 HttpAgent</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/iaIdQfEric9TwZnibN07UrZSdx5VroUSGZJH2cYKWNukB1BhdR0ZPib6MHX6vNkiaofXFwWKu03Fnyxdkib6YQeG0gmw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>这个类只干了一件事，那就是封装 http 请求参数，向 Nacos 服务端发送请求，接收响应，这其实就是单一职责原则的体现。</p><p>当其它的地方需要向 Nacos 服务端发送请求时，只需要通过这个接口的实现，传入参数就可以发送请求了，而不需要关心如何携带服务端鉴权参数、http 请求参数如何组装等问题。</p><h2 id="19、尽量使用聚合-组合代替继承"><a href="#19、尽量使用聚合-组合代替继承" class="headerlink" title="19、尽量使用聚合/组合代替继承"></a><strong>19、尽量使用聚合/组合代替继承</strong></h2><p>继承的弊端：</p><ul><li>灵活性低。java 语言是单继承的，无法同时继承很多类，并且继承容易导致代码层次太深，不易于维护</li><li>耦合性高。一旦父类的代码修改，可能会影响到子类的行为</li></ul><p>所以一般推荐使用聚合/组合代替继承。</p><p>聚合/组合的意思就是通过成员变量的方式来使用类。</p><p>比如说，OrderService 需要使用 UserService，可以注入一个 UserService 而非通过继承 UserService。</p><p>聚合和组合的区别就是，组合是当对象一创建的时候，就直接给属性赋值，而聚合的方式可以通过 set 方式来设置。</p><p>组合：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class OrderService &#123;</span><br><span class="line"></span><br><span class="line">    private UserService userService = new UserService();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>聚合：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class OrderService &#123;</span><br><span class="line"></span><br><span class="line">    private UserService userService;</span><br><span class="line"></span><br><span class="line">    public void setUserService(UserService userService) &#123;</span><br><span class="line">        this.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="20、使用设计模式优化代码"><a href="#20、使用设计模式优化代码" class="headerlink" title="20、使用设计模式优化代码"></a><strong>20、使用设计模式优化代码</strong></h2><p>在平时开发中，使用设计模式可以增加代码的扩展性。</p><p>比如说，当你需要做一个可以根据不同的平台做不同消息推送的功能时，就可以使用策略模式的方式来优化。</p><p>设计一个接口：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public interface MessageNotifier &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 是否支持改类型的通知的方式</span><br><span class="line">     *</span><br><span class="line">     * @param type 0:短信 1:app</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    boolean support(int type);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 通知</span><br><span class="line">     *</span><br><span class="line">     * @param user</span><br><span class="line">     * @param content</span><br><span class="line">     */</span><br><span class="line">    void notify(User user, String content);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>短信通知实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class SMSMessageNotifier implements MessageNotifier &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public boolean support(int type) &#123;</span><br><span class="line">        return type == 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void notify(User user, String content) &#123;</span><br><span class="line">        //调用短信通知的api发送短信</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>app 通知实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class AppMessageNotifier implements MessageNotifier &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public boolean support(int type) &#123;</span><br><span class="line">        return type == 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void notify(User user, String content) &#123;</span><br><span class="line">       //调用通知app通知的api</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后提供一个方法，当需要进行消息通知时，调用 notifyMessage，传入相应的参数就行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Resource</span><br><span class="line">private List&lt;MessageNotifier&gt; messageNotifiers;</span><br><span class="line"></span><br><span class="line">public void notifyMessage(User user, String content, int notifyType) &#123;</span><br><span class="line">    for (MessageNotifier messageNotifier : messageNotifiers) &#123;</span><br><span class="line">        if (messageNotifier.support(notifyType)) &#123;</span><br><span class="line">            messageNotifier.notify(user, content);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设此时需要支持通过邮件通知，只需要有对应实现就行。</p><h2 id="21、不滥用设计模式"><a href="#21、不滥用设计模式" class="headerlink" title="21、不滥用设计模式"></a><strong>21、不滥用设计模式</strong></h2><p>用好设计模式可以增加代码的扩展性，但是滥用设计模式确是不可取的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public void printPerson(Person person) &#123;</span><br><span class="line">    StringBuilder sb = new StringBuilder();</span><br><span class="line">    if (StringUtils.isNotBlank(person.getName())) &#123;</span><br><span class="line">        sb.append(&quot;姓名:&quot;).append(person.getName());</span><br><span class="line">    &#125;</span><br><span class="line">    if (StringUtils.isNotBlank(person.getIdCardNo())) &#123;</span><br><span class="line">        sb.append(&quot;身份证号:&quot;).append(person.getIdCardNo());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 省略</span><br><span class="line">    System.out.println(sb.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比如上面打印 Person 信息的代码，用 if 判断就能够做到效果，你说我要不用责任链或者什么设计模式来优化一下吧，没必要。</p><h2 id="22、面向接口编程"><a href="#22、面向接口编程" class="headerlink" title="22、面向接口编程"></a><strong>22、面向接口编程</strong></h2><p>在一些可替换的场景中，应该引用父类或者抽象，而非实现。</p><p>举个例子，在实际项目中可能需要对一些图片进行存储，但是存储的方式很多，比如可以选择阿里云的 OSS，又或者是七牛云，存储服务器等等。所以对于存储图片这个功能来说，这些具体的实现是可以相互替换的。</p><p>所以在项目中，我们不应当在代码中耦合一个具体的实现，而是可以提供一个存储接口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public interface FileStorage &#123;</span><br><span class="line"></span><br><span class="line">    String store(String fileName, byte[] bytes);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果选择了阿里云 OSS 作为存储服务器，那么就可以基于 OSS 实现一个 FileStorage，在项目中哪里需要存储的时候，只要实现注入这个接口就可以了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">private FileStorage fileStorage;</span><br></pre></td></tr></table></figure><p>假设用了一段时间之后，发现阿里云的 OSS 比较贵，此时想换成七牛云的，那么此时只需要基于七牛云的接口实现 FileStorage 接口，然后注入到 IOC，那么原有代码用到 FileStorage 根本不需要动，实现轻松的替换。</p><h2 id="23、经常重构旧的代码"><a href="#23、经常重构旧的代码" class="headerlink" title="23、经常重构旧的代码"></a><strong>23、经常重构旧的代码</strong></h2><p>随着时间的推移，业务的增长，有的代码可能不再适用，或者有了更好的设计方式，那么可以及时的重构业务代码。</p><p>就拿上面的消息通知为例，在业务刚开始的时候可能只支持短信通知，于是在代码中就直接耦合了短信通知的代码。但是随着业务的增长，逐渐需要支持 app、邮件之类的通知，那么此时就可以重构以前的代码，抽出一个策略接口，进行代码优化。</p><h2 id="24、null-值判断"><a href="#24、null-值判断" class="headerlink" title="24、null 值判断"></a><strong>24、null 值判断</strong></h2><p>空指针是代码开发中的一个难题，作为程序员的基本修改，应该要防止空指针。</p><p>可能产生空指针的原因：</p><ul><li>数据返回对象为 null</li><li>自动拆箱导致空指针</li><li>rpc 调用返回的对象可能为空格</li></ul><p>所以在需要这些的时候，需要强制判断是否为 null。前面也提到可以使用 Optional 来优雅地进行 null 值判断。</p><h2 id="25、pojo-类重写-toString-方法"><a href="#25、pojo-类重写-toString-方法" class="headerlink" title="25、pojo 类重写 toString 方法"></a><strong>25、pojo 类重写 toString 方法</strong></h2><p>pojo 一般内部都有很多属性，重写 toString 方法可以方便在打印或者测试的时候查看内部的属性。</p><h2 id="26、魔法值用常量表示"><a href="#26、魔法值用常量表示" class="headerlink" title="26、魔法值用常量表示"></a><strong>26、魔法值用常量表示</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public void sayHello(String province) &#123;</span><br><span class="line">    if (&quot;广东省&quot;.equals(province)) &#123;</span><br><span class="line">        System.out.println(&quot;靓仔~~&quot;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        System.out.println(&quot;帅哥~~&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码里，广东省就是一个魔法值，那么就可以将用一个常量来保存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">private static final String GUANG_DONG_PROVINCE = &quot;广东省&quot;;</span><br><span class="line"></span><br><span class="line">public void sayHello(String province) &#123;</span><br><span class="line">    if (GUANG_DONG_PROVINCE.equals(province)) &#123;</span><br><span class="line">        System.out.println(&quot;靓仔~~&quot;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        System.out.println(&quot;帅哥~~&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="27、资源释放写到-finally"><a href="#27、资源释放写到-finally" class="headerlink" title="27、资源释放写到 finally"></a><strong>27、资源释放写到 finally</strong></h2><p>比如在使用一个 api 类锁或者进行 IO 操作的时候，需要主动写代码需释放资源，为了能够保证资源能够被真正释放，那么就需要在 finally 中写代码保证资源释放。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/iaIdQfEric9TwZnibN07UrZSdx5VroUSGZJiaOGWSjrL6Ec79kiaEybcQW18AKicTich5C1LOwnGqLyFx6DWnRSThSTmw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>如图所示，就是 CopyOnWriteArrayList 的 add 方法的实现，最终是在 finally 中进行锁的释放。</p><h2 id="28、使用线程池代替手动创建线程"><a href="#28、使用线程池代替手动创建线程" class="headerlink" title="28、使用线程池代替手动创建线程"></a><strong>28、使用线程池代替手动创建线程</strong></h2><p>使用线程池还有以下好处：</p><ul><li>降低资源消耗。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。</li><li>提高响应速度。当任务到达时，任务可以不需要的等到线程创建就能立即执行。</li><li>提高线程的可管理性。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统 的稳定性，使用线程池可以进行统一的分配，调优和监控。</li></ul><p>所以为了达到更好的利用资源，提高响应速度，就可以使用线程池的方式来代替手动创建线程。</p><p>如果对线程池不清楚的同学，可以看一下这篇文章: <a href="https://mp.weixin.qq.com/s?__biz=Mzg5MDczNDI0Nw==&mid=2247491081&idx=1&sn=4dddb33a76a4ee1f4c52b24059fb2eb8&scene=21#wechat_redirect">7000 字+24 张图带你彻底弄懂线程池</a></p><h2 id="29、线程设置名称"><a href="#29、线程设置名称" class="headerlink" title="29、线程设置名称"></a><strong>29、线程设置名称</strong></h2><p>在日志打印的时候，日志是可以把线程的名字给打印出来。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/iaIdQfEric9TwZnibN07UrZSdx5VroUSGZJdia25uo1A5px1cx1py6KTpSrPBAlCpjZBzSVItQwtvzKnCpBnvqzqGQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>如上图，日志打印出来的就是 tom 猫的线程。</p><p>所以，设置线程的名称可以帮助我们更好的知道代码是通过哪个线程执行的，更容易排查问题。</p><h2 id="30、涉及线程间可见性加-volatile"><a href="#30、涉及线程间可见性加-volatile" class="headerlink" title="30、涉及线程间可见性加 volatile"></a><strong>30、涉及线程间可见性加 volatile</strong></h2><p>在 RocketMQ 源码中有这么一段代码</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/iaIdQfEric9TwZnibN07UrZSdx5VroUSGZJwJwumsKWpuMO3pXX40vh4IvzdibNmaSKIxq6QvA0KSUCWxibIw1IAuMA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>在消费者在从服务端拉取消息的时候，会单独开一个线程，执行 while 循环，只要 stopped 状态一直为 false，那么就会一直循环下去，线程就一直会运行下去，拉取消息。</p><p>当消费者客户端关闭的时候，就会将 stopped 状态设置为 true，告诉拉取消息的线程需要停止了。但是由于并发编程中存在可见性的问题，所以虽然客户端关闭线程将 stopped 状态设置为 true，但是拉取消息的线程可能看不见，不能及时感知到数据的修改，还是认为 stopped 状态设置为 false，那么就还会运行下去。</p><p>针对这种可见性的问题，java 提供了一个 volatile 关键字来保证线程间的可见性。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/iaIdQfEric9TwZnibN07UrZSdx5VroUSGZJwMdxx3VJuKJ58J3ZQdT5v9KJcT65OzoU4lBxaqDibWGsqicIz2y0xTRw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>所以，源码中就加了 volatile 关键字。</p><p>加了 volatile 关键字之后，一旦客户端的线程将 stopped 状态设置为 true 时候，拉取消息的线程就能立马知道 stopped 已经是 false 了，那么再次执行 while 条件判断的时候，就不成立，线程就运行结束了，然后退出。</p><h2 id="31、考虑线程安全问题"><a href="#31、考虑线程安全问题" class="headerlink" title="31、考虑线程安全问题"></a><strong>31、考虑线程安全问题</strong></h2><p>在平时开发中，有时需要考虑并发安全的问题。</p><p>举个例子来说，一般在调用第三方接口的时候，可能会有一个鉴权的机制，一般会携带一个请求头 token 参数过去，而 token 也是调用第三方接口返回的，一般这种 token 都会有个过期时间，比如 24 小时。</p><p>我们一般会将 token 缓存到 Redis 中，设置一个过期时间。向第三方发送请求时，会直接从缓存中查找，但是当从 Redis 中获取不到 token 的时候，我们都会重新请求 token 接口，获取 token，然后再设置到缓存中。</p><p>整个过程看起来是没什么问题，但是实则隐藏线程安全问题。</p><p>假设当出现并发的时候，同时来两个线程 AB 从缓存查找，发现没有，那么 AB 此时就会同时调用 token 获取接口。假设 A 先获取到 token，B 后获取到 token，但是由于 CPU 调度问题，线程 B 虽然后获取到 token，但是先往 Redis 存数据，而线程 A 后存，覆盖了 B 请求的 token。</p><p>这下就会出现大问题，最新的 token 被覆盖了，那么之后一定时间内 token 都是无效的，接口就请求不通。</p><p>针对这种问题，可以使用 double check 机制来优化获取 token 的问题。</p><p>所以，在实际中，需要多考虑考虑业务是否有线程安全问题，有集合读写安全问题，那么就用线程安全的集合，业务有安全的问题，那么就可以通过加锁的手段来解决。</p><h2 id="32、慎用异步"><a href="#32、慎用异步" class="headerlink" title="32、慎用异步"></a><strong>32、慎用异步</strong></h2><p>虽然在使用多线程可以帮助我们提高接口的响应速度，但是也会带来很多问题。</p><p><strong>事务问题</strong></p><p>一旦使用了异步，就会导致两个线程不是同一个事务的，导致异常之后无法正常回滚数据。</p><p><strong>cpu 负载过高</strong></p><p>之前有个小伙伴遇到需要同时处理几万调数据的需求，每条数据都需要调用很多次接口，为了达到老板期望的时间要求，使用了多线程跑，开了很多线程，此时会发现系统的 cpu 会飙升</p><p><strong>意想不到的异常</strong></p><p>还是上面的提到的例子，在测试的时候就发现，由于并发量激增，在请求第三方接口的时候，返回了很多错误信息，导致有的数据没有处理成功。</p><p>虽然说慎用异步，但不代表不用，如果可以保证事务的问题，或是 CPU 负载不会高的话，那么还是可以使用的。</p><h2 id="33、减小锁的范围"><a href="#33、减小锁的范围" class="headerlink" title="33、减小锁的范围"></a><strong>33、减小锁的范围</strong></h2><p>减小锁的范围就是给需要加锁的代码加锁，不需要加锁的代码不要加锁。这样就能减少加锁的时间，从而可以较少锁互斥的时间，提高效率。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/iaIdQfEric9TwZnibN07UrZSdx5VroUSGZJkLDQtnJDzKKNdCUWdjibhxJibPjt5U6yfuBcicQhy6ibFz1daUvVk4247w/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>比如 CopyOnWriteArrayList 的 addAll 方法的实现，lock.lock(); 代码完全可以放到代码的第一行，但是作者并没有，因为前面判断的代码不会有线程安全的问题，不放到加锁代码中可以减少锁抢占和占有的时间。</p><h2 id="34、有类型区分时定义好枚举"><a href="#34、有类型区分时定义好枚举" class="headerlink" title="34、有类型区分时定义好枚举"></a><strong>34、有类型区分时定义好枚举</strong></h2><p>比如在项目中不同的类型的业务可能需要上传各种各样的附件，此时就可以定义好不同的一个附件的枚举，来区分不同业务的附件。</p><p>不要在代码中直接写死，不定义枚举，代码阅读起来非常困难，直接看到数字都是懵逼的。。</p><h2 id="35、远程接口调用设置超时时间"><a href="#35、远程接口调用设置超时时间" class="headerlink" title="35、远程接口调用设置超时时间"></a><strong>35、远程接口调用设置超时时间</strong></h2><p>比如在进行微服务之间进行 rpc 调用的时候，又或者在调用第三方提供的接口的时候，需要设置超时时间，防止因为各种原因，导致线程”卡死“在那。</p><p>我以前就遇到过线上就遇到过这种问题。当时的业务是订阅 kafka 的消息，然后向第三方上传数据。在某个周末，突然就接到电话，说数据无法上传了，通过排查线上的服务器才发现所有的线程都线程”卡死“了，最后定位到代码才发现原来是没有设置超时时间。</p><h2 id="36、集合使用应当指明初始化大小"><a href="#36、集合使用应当指明初始化大小" class="headerlink" title="36、集合使用应当指明初始化大小"></a><strong>36、集合使用应当指明初始化大小</strong></h2><p>比如在写代码的时候，经常会用到 List、Map 来临时存储数据，其中最常用的就是 ArrayList 和 HashMap。但是用不好可能也会导致性能的问题。</p><p>比如说，在 ArrayList 中，底层是基于数组来存储的，数组是一旦确定大小是无法再改变容量的。但不断的往 ArrayList 中存储数据的时候，总有那么一刻会导致数组的容量满了，无法再存储其它元素，此时就需要对数组扩容。所谓的扩容就是新创建一个容量是原来 1.5 倍的数组，将原有的数据给拷贝到新的数组上，然后用新的数组替代原来的数组。</p><p>在扩容的过程中，由于涉及到数组的拷贝，就会导致性能消耗；同时 HashMap 也会由于扩容的问题，消耗性能。所以在使用这类集合时可以在构造的时候指定集合的容量大小。</p><h2 id="37、尽量不要使用-BeanUtils-来拷贝属性"><a href="#37、尽量不要使用-BeanUtils-来拷贝属性" class="headerlink" title="37、尽量不要使用 BeanUtils 来拷贝属性"></a><strong>37、尽量不要使用 BeanUtils 来拷贝属性</strong></h2><p>在开发中经常需要对 JavaBean 进行转换，但是又不想一个一个手动 set，比较麻烦，所以一般会使用属性拷贝的一些工具，比如说 Spring 提供的 BeanUtils 来拷贝。不得不说，使用 BeanUtils 来拷贝属性是真的舒服，使用一行代码可以代替几行甚至十几行代码，我也喜欢用。</p><p>但是喜欢归喜欢，但是会带来性能问题，因为底层是通过反射来的拷贝属性的，所以尽量不要用 BeanUtils 来拷贝属性。</p><p>比如你可以装个 JavaBean 转换的插件，帮你自动生成转换代码；又或者可以使用性能更高的 MapStruct 来进行 JavaBean 转换，MapStruct 底层是通过调用（settter/getter）来实现的，而不是反射来快速执行。</p><h2 id="38、使用-StringBuilder-进行字符串拼接"><a href="#38、使用-StringBuilder-进行字符串拼接" class="headerlink" title="38、使用 StringBuilder 进行字符串拼接"></a><strong>38、使用 StringBuilder 进行字符串拼接</strong></h2><p>如下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String str1 = &quot;123&quot;;</span><br><span class="line">String str2 = &quot;456&quot;;</span><br><span class="line">String str3 = &quot;789&quot;;</span><br><span class="line">String str4 = str1 + str2 + str3;</span><br></pre></td></tr></table></figure><p>使用 + 拼接字符串的时候，会创建一个 StringBuilder，然后将要拼接的字符串追加到 StringBuilder，再 toString，这样如果多次拼接就会执行很多次的创建 StringBuilder，z 执行 toString 的操作。</p><p>所以可以手动通过 StringBuilder 拼接，这样只会创建一次 StringBuilder，效率更高。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">StringBuilder sb = new StringBuilder();</span><br><span class="line">String str = sb.append(&quot;123&quot;).append(&quot;456&quot;).append(&quot;789&quot;).toString();</span><br></pre></td></tr></table></figure><h2 id="39、-Transactional-应指定回滚的异常类型"><a href="#39、-Transactional-应指定回滚的异常类型" class="headerlink" title="39、@Transactional 应指定回滚的异常类型"></a><strong>39、@Transactional 应指定回滚的异常类型</strong></h2><p>平时在写代码的时候需要通过 rollbackFor 显示指定需要对什么异常回滚，原因在这：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/iaIdQfEric9TwZnibN07UrZSdx5VroUSGZJYS5xpUJ7dUXmNzjD4qNLIOPM0vsibWxLnHI2ZpVkAflsEaoLf9LtiaYw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>默认是只能回滚 RuntimeException 和 Error 异常，所以需要手动指定，比如指定成 Expection 等。</p><h2 id="40、谨慎方法内部调用动态代理的方法"><a href="#40、谨慎方法内部调用动态代理的方法" class="headerlink" title="40、谨慎方法内部调用动态代理的方法"></a><strong>40、谨慎方法内部调用动态代理的方法</strong></h2><p>如下事务代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class PersonService &#123;</span><br><span class="line"></span><br><span class="line">    public void update(Person person) &#123;</span><br><span class="line">        // 处理</span><br><span class="line">        updatePerson(person);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Transactional(rollbackFor = Exception.class)</span><br><span class="line">    public void updatePerson(Person person) &#123;</span><br><span class="line">        // 处理</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>update 调用了加了@Transactional 注解的 updatePerson 方法，那么此时 updatePerson 的事务就是失效。</p><p>其实失效的原因不是事务的锅，是由 AOP 机制决定的，因为事务是基于 AOP 实现的。AOP 是基于对象的代理，当内部方法调用时，走的不是动态代理对象的方法，而是原有对象的方法调用，如此就走不到动态代理的代码，就会失效了。</p><p>如果实在需要让动态代理生效，可以注入自己的代理对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class PersonService &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private PersonService personService;</span><br><span class="line"></span><br><span class="line">    public void update(Person person) &#123;</span><br><span class="line">        // 处理</span><br><span class="line">        personService.updatePerson(person);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Transactional(rollbackFor = Exception.class)</span><br><span class="line">    public void updatePerson(Person person) &#123;</span><br><span class="line">        // 处理</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="41、需要什么字段-select-什么字段"><a href="#41、需要什么字段-select-什么字段" class="headerlink" title="41、需要什么字段 select 什么字段"></a><strong>41、需要什么字段 select 什么字段</strong></h2><p>查询全字段有以下几点坏处：</p><h6 id="增加不必要的字段的网络传输"><a href="#增加不必要的字段的网络传输" class="headerlink" title="增加不必要的字段的网络传输"></a>增加不必要的字段的网络传输</h6><p>比如有些文本的字段，存储的数据非常长，但是本次业务使用不到，但是如果查了就会把这个数据返回给客户端，增加了网络传输的负担</p><h6 id="会导致无法使用到覆盖索引"><a href="#会导致无法使用到覆盖索引" class="headerlink" title="会导致无法使用到覆盖索引"></a>会导致无法使用到覆盖索引</h6><p>比如说，现在有身份证号和姓名做了联合索引，现在只需要根据身份证号查询姓名，如果直接 select name 的话，那么在遍历索引的时候，发现要查询的字段在索引中已经存在，那么此时就会直接从索引中将 name 字段的数据查出来，返回，而不会继续去查找聚簇索引，减少回表的操作。</p><p>所以建议是需要使用什么字段查询什么字段。比如 mp 也支持在构建查询条件的时候，查询某个具体的字段。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Wrappers.query().select(&quot;name&quot;);</span><br></pre></td></tr></table></figure><h2 id="42、不循环调用数据库"><a href="#42、不循环调用数据库" class="headerlink" title="42、不循环调用数据库"></a><strong>42、不循环调用数据库</strong></h2><p>不要在循环中访问数据库，这样会严重影响数据库性能。</p><p>比如需要查询一批人员的信息，人员的信息存在基本信息表和扩展表中，错误的代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public List&lt;PersonVO&gt; selectPersons(List&lt;Long&gt; personIds) &#123;</span><br><span class="line">    List&lt;PersonVO&gt; persons = new ArrayList&lt;&gt;(personIds.size());</span><br><span class="line">    List&lt;Person&gt; personList = personMapper.selectByIds(personIds);</span><br><span class="line">    for (Person person : personList) &#123;</span><br><span class="line">        PersonVO vo = new PersonVO();</span><br><span class="line">        PersonExt personExt = personExtMapper.selectById(person.getId());</span><br><span class="line">        // 组装数据</span><br><span class="line">        persons.add(vo);</span><br><span class="line">    &#125;</span><br><span class="line">    return persons;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>遍历每个人员的基本信息，去数据库查找。</p><p>正确的方法应该先批量查出来，然后转成 map：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public List&lt;PersonVO&gt; selectPersons(List&lt;Long&gt; personIds) &#123;</span><br><span class="line">    List&lt;PersonVO&gt; persons = new ArrayList&lt;&gt;(personIds.size());</span><br><span class="line">    List&lt;Person&gt; personList = personMapper.selectByIds(personIds);</span><br><span class="line">        //批量查询，转换成Map</span><br><span class="line">    List&lt;PersonExt&gt; personExtList = personExtMapper.selectByIds(person.getId());</span><br><span class="line">    Map&lt;String, PersonExt&gt; personExtMap = personExtList.stream().collect(Collectors.toMap(PersonExt::getPersonId, Function.identity()));</span><br><span class="line">    for (Person person : personList) &#123;</span><br><span class="line">        PersonVO vo = new PersonVO();</span><br><span class="line">        //直接从Map中查找</span><br><span class="line">        PersonExt personExt = personExtMap.get(person.getId());</span><br><span class="line">        // 组装数据</span><br><span class="line">        persons.add(vo);</span><br><span class="line">    &#125;</span><br><span class="line">    return persons;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="43、用业务代码代替多表-join"><a href="#43、用业务代码代替多表-join" class="headerlink" title="43、用业务代码代替多表 join"></a><strong>43、用业务代码代替多表 join</strong></h2><p>如上面代码所示，原本也可以将两张表根据人员的 id 进行关联查询。但是不推荐这么，阿里也禁止多表 join 的操作</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/iaIdQfEric9TwZnibN07UrZSdx5VroUSGZJzAyHCWMu6EkIdGcMY7Zs8LJAibE5HLRd37X1k9O9ia4rAqjnHKxwZpVA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>而之所以会禁用，是因为 join 的效率比较低。</p><p>MySQL 是使用了嵌套循环的方式来实现关联查询的，也就是 for 循环会套 for 循环的意思。用第一张表做外循环，第二张表做内循环，外循环的每一条记录跟内循环中的记录作比较，符合条件的就输出，这种效率肯定低。</p><h2 id="44、装上阿里代码检查插件"><a href="#44、装上阿里代码检查插件" class="headerlink" title="44、装上阿里代码检查插件"></a><strong>44、装上阿里代码检查插件</strong></h2><p>我们平时写代码由于各种因为，比如什么领导啊，项目经理啊，会一直催进度，导致写代码都来不及思考，怎么快怎么来，cv 大法上线，虽然有心想写好代码，但是手确不听使唤。所以我建议装一个阿里的代码规范插件，如果有代码不规范，会有提醒，这样就可以知道哪些是可以优化的了。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/iaIdQfEric9TwZnibN07UrZSdx5VroUSGZJpibibUwpM137jeYbyDk5NFEq0FTZQWZiaibbYEP3y5GzBrmcvWGQ7PRu8w/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>如果你有强迫症，相信我，装了这款插件，你的代码会写的很漂亮。</p><h2 id="45、及时跟同事沟通"><a href="#45、及时跟同事沟通" class="headerlink" title="45、及时跟同事沟通"></a><strong>45、及时跟同事沟通</strong></h2><p>写代码的时候不能闭门造车，及时跟同事沟通，比如刚进入一个新的项目的，对项目工程不熟悉，一些技术方案不了解，如果上来就直接写代码，很有可能就会踩坑。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/css/universe.css"/>
      <url>/css/universe.css</url>
      
        <content type="html"><![CDATA[/* 背景宇宙星光  */#universe{  display: block;  position: fixed;  margin: 0;  padding: 0;  border: 0;  outline: 0;  left: 0;  top: 0;  width: 100%;  height: 100%;  pointer-events: none;  /* 这个是调置顶的优先级的，-1在文章页下面，背景上面，个人推荐这种 */  z-index: -1;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* 页脚与头图透明 */#footer {  background: transparent !important;}#page-header {  background: transparent !important;}/* 白天模式遮罩透明 */#footer::before {  background: transparent !important;}#page-header::before {  background: transparent !important;}/* 夜间模式遮罩透明 */[data-theme="dark"] #footer::before {  background: transparent !important;}[data-theme="dark"] #page-header::before {  background: transparent !important;}/* 翻页按钮居中 */#pagination {  width: 100%;  margin: auto;}/* 一级菜单居中 */#nav .menus_items {  position: absolute !important;  width: fit-content !important;  left: 50% !important;  transform: translateX(-50%) !important;}/* 子菜单横向展示 */#nav .menus_items .menus_item:hover .menus_item_child {  display: flex !important;}/* 这里的2是代表导航栏的第2个元素，即有子菜单的元素，可以按自己需求修改 */.menus_items .menus_item:nth-child(2) .menus_item_child {  left: -125px;}/* 夜间模式菜单栏发光字 */[data-theme="dark"] #nav .site-page,[data-theme="dark"] #nav .menus_items .menus_item .menus_item_child li a {  text-shadow: 0 0 2px var(--theme-color) !important;}/* 手机端适配 */[data-theme="dark"] #sidebar #sidebar-menus .menus_items .site-page {  text-shadow: 0 0 2px var(--theme-color) !important;}/* 侧边栏个人信息卡片动态渐变色 */#aside-content > .card-widget.card-info {  background: linear-gradient(    -45deg,    #e8d8b9,    #eccec5,    #a3e9eb,    #bdbdf0,    #eec1ea  );  box-shadow: 0 0 5px rgb(66, 68, 68);  position: relative;  background-size: 400% 400%;  -webkit-animation: Gradient 10s ease infinite;  -moz-animation: Gradient 10s ease infinite;  animation: Gradient 10s ease infinite !important;}@-webkit-keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}@-moz-keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}@keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}/* 黑夜模式适配 */[data-theme="dark"] #aside-content > .card-widget.card-info {  background: #191919ee;}/* 个人信息Follow me按钮 */#aside-content > .card-widget.card-info > #card-info-btn {  background-color: #3eb8be;  border-radius: 8px;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>about</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/universe.js"/>
      <url>/js/universe.js</url>
      
        <content type="html"><![CDATA[function dark() {window.requestAnimationFrame=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame;var n,e,i,h,t=.05,s=document.getElementById("universe"),o=!0,a="180,184,240",r="226,225,142",d="226,225,224",c=[];function f(){n=window.innerWidth,e=window.innerHeight,i=.216*n,s.setAttribute("width",n),s.setAttribute("height",e)}function u(){h.clearRect(0,0,n,e);for(var t=c.length,i=0;i<t;i++){var s=c[i];s.move(),s.fadeIn(),s.fadeOut(),s.draw()}}function y(){this.reset=function(){this.giant=m(3),this.comet=!this.giant&&!o&&m(10),this.x=l(0,n-10),this.y=l(0,e),this.r=l(1.1,2.6),this.dx=l(t,6*t)+(this.comet+1-1)*t*l(50,120)+2*t,this.dy=-l(t,6*t)-(this.comet+1-1)*t*l(50,120),this.fadingOut=null,this.fadingIn=!0,this.opacity=0,this.opacityTresh=l(.2,1-.4*(this.comet+1-1)),this.do=l(5e-4,.002)+.001*(this.comet+1-1)},this.fadeIn=function(){this.fadingIn&&(this.fadingIn=!(this.opacity>this.opacityTresh),this.opacity+=this.do)},this.fadeOut=function(){this.fadingOut&&(this.fadingOut=!(this.opacity<0),this.opacity-=this.do/2,(this.x>n||this.y<0)&&(this.fadingOut=!1,this.reset()))},this.draw=function(){if(h.beginPath(),this.giant)h.fillStyle="rgba("+a+","+this.opacity+")",h.arc(this.x,this.y,2,0,2*Math.PI,!1);else if(this.comet){h.fillStyle="rgba("+d+","+this.opacity+")",h.arc(this.x,this.y,1.5,0,2*Math.PI,!1);for(var t=0;t<30;t++)h.fillStyle="rgba("+d+","+(this.opacity-this.opacity/20*t)+")",h.rect(this.x-this.dx/4*t,this.y-this.dy/4*t-2,2,2),h.fill()}else h.fillStyle="rgba("+r+","+this.opacity+")",h.rect(this.x,this.y,this.r,this.r);h.closePath(),h.fill()},this.move=function(){this.x+=this.dx,this.y+=this.dy,!1===this.fadingOut&&this.reset(),(this.x>n-n/4||this.y<0)&&(this.fadingOut=!0)},setTimeout(function(){o=!1},50)}function m(t){return Math.floor(1e3*Math.random())+1<10*t}function l(t,i){return Math.random()*(i-t)+t}f(),window.addEventListener("resize",f,!1),function(){h=s.getContext("2d");for(var t=0;t<i;t++)c[t]=new y,c[t].reset();u()}(),function t(){document.getElementsByTagName('html')[0].getAttribute('data-theme')=='dark'&&u(),window.requestAnimationFrame(t)}()};dark()]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>link</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>movies</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Gallery</title>
      <link href="/Gallery/index.html"/>
      <url>/Gallery/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/light.js"/>
      <url>/js/light.js</url>
      
        <content type="html"><![CDATA[// 霓虹灯效果// 颜色数组var arr = ["#39c5bb", "#f14747", "#f1a247", "#f1ee47", "#b347f1", "#1edbff", "#ed709b", "#5636ed"];// 颜色索引var idx = 0;// 切换颜色function changeColor() {    // 仅夜间模式才启用        if (document.getElementsByTagName('html')[0].getAttribute('data-theme') == 'dark') {        if (document.getElementById("site-name"))            document.getElementById("site-name").style.textShadow = arr[idx] + " 0 0 15px";            if (document.getElementById("site-title"))                document.getElementById("site-title").style.textShadow = arr[idx] + " 0 0 15px";        if (document.getElementById("site-subtitle"))            document.getElementById("site-subtitle").style.textShadow = arr[idx] + " 0 0 10px";            if (document.getElementById("post-info"))                document.getElementById("post-info").style.textShadow = arr[idx] + " 0 0 5px";        try {            document.getElementsByClassName("author-info__name")[0].style.textShadow = arr[idx] + " 0 0 12px";                document.getElementsByClassName("author-info__description")[0].style.textShadow = arr[idx] + " 0 0 12px";        } catch {            }            idx++;            if (idx == 8) {                idx = 0;        }    } else {            // 白天模式恢复默认            if (document.getElementById("site-name"))                document.getElementById("site-name").style.textShadow = "#1e1e1ee0 1px 1px 1px";        if (document.getElementById("site-title"))            document.getElementById("site-title").style.textShadow = "#1e1e1ee0 1px 1px 1px";            if (document.getElementById("site-subtitle"))                document.getElementById("site-subtitle").style.textShadow = "#1e1e1ee0 1px 1px 1px";        if (document.getElementById("post-info"))            document.getElementById("post-info").style.textShadow = "#1e1e1ee0 1px 1px 1px";            try {                document.getElementsByClassName("author-info__name")[0].style.textShadow = "";            document.getElementsByClassName("author-info__description")[0].style.textShadow = "";            } catch {        }    }    }    // 开启计时器    window.onload = setInterval(changeColor, 1200);]]></content>
      
    </entry>
    
    
  
</search>
